// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CharmCRUDServiceClient is the client API for CharmCRUDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CharmCRUDServiceClient interface {
	Add(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EntityResponse, error)
	Get(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	Delete(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	Update(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	Len(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LenResponse, error)
}

type charmCRUDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCharmCRUDServiceClient(cc grpc.ClientConnInterface) CharmCRUDServiceClient {
	return &charmCRUDServiceClient{cc}
}

func (c *charmCRUDServiceClient) Add(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.CharmCRUDService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charmCRUDServiceClient) GetAll(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.CharmCRUDService/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charmCRUDServiceClient) Get(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.CharmCRUDService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charmCRUDServiceClient) Delete(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.CharmCRUDService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charmCRUDServiceClient) Update(ctx context.Context, in *EntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.CharmCRUDService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *charmCRUDServiceClient) Len(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LenResponse, error) {
	out := new(LenResponse)
	err := c.cc.Invoke(ctx, "/api.CharmCRUDService/Len", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CharmCRUDServiceServer is the server API for CharmCRUDService service.
// All implementations must embed UnimplementedCharmCRUDServiceServer
// for forward compatibility
type CharmCRUDServiceServer interface {
	Add(context.Context, *EntityRequest) (*EntityResponse, error)
	GetAll(context.Context, *empty.Empty) (*EntityResponse, error)
	Get(context.Context, *EntityRequest) (*EntityResponse, error)
	Delete(context.Context, *EntityRequest) (*EntityResponse, error)
	Update(context.Context, *EntityRequest) (*EntityResponse, error)
	Len(context.Context, *empty.Empty) (*LenResponse, error)
}

// UnimplementedCharmCRUDServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCharmCRUDServiceServer struct {
}

func (UnimplementedCharmCRUDServiceServer) Add(context.Context, *EntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCharmCRUDServiceServer) GetAll(context.Context, *empty.Empty) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedCharmCRUDServiceServer) Get(context.Context, *EntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCharmCRUDServiceServer) Delete(context.Context, *EntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCharmCRUDServiceServer) Update(context.Context, *EntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCharmCRUDServiceServer) Len(context.Context, *empty.Empty) (*LenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Len not implemented")
}

// UnsafeCharmCRUDServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CharmCRUDServiceServer will
// result in compilation errors.
type UnsafeCharmCRUDServiceServer interface {
	mustEmbedUnimplementedCharmCRUDServiceServer()
}

func RegisterCharmCRUDServiceServer(s grpc.ServiceRegistrar, srv CharmCRUDServiceServer) {
	s.RegisterService(&CharmCRUDService_ServiceDesc, srv)
}

func _CharmCRUDService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharmCRUDServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CharmCRUDService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharmCRUDServiceServer).Add(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharmCRUDService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharmCRUDServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CharmCRUDService/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharmCRUDServiceServer).GetAll(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharmCRUDService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharmCRUDServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CharmCRUDService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharmCRUDServiceServer).Get(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharmCRUDService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharmCRUDServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CharmCRUDService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharmCRUDServiceServer).Delete(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharmCRUDService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharmCRUDServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CharmCRUDService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharmCRUDServiceServer).Update(ctx, req.(*EntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CharmCRUDService_Len_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CharmCRUDServiceServer).Len(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CharmCRUDService/Len",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CharmCRUDServiceServer).Len(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CharmCRUDService_ServiceDesc is the grpc.ServiceDesc for CharmCRUDService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CharmCRUDService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CharmCRUDService",
	HandlerType: (*CharmCRUDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _CharmCRUDService_Add_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _CharmCRUDService_GetAll_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CharmCRUDService_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CharmCRUDService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CharmCRUDService_Update_Handler,
		},
		{
			MethodName: "Len",
			Handler:    _CharmCRUDService_Len_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/CRUDService.proto",
}
